{
  "stats": {
    "suites": 6,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "start": "2019-01-15T15:18:42.862Z",
    "end": "2019-01-15T15:18:44.266Z",
    "duration": 1404,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c610d8ab-73ab-4d9b-9ecf-07b14912b5b7",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a9c698aa-4082-4cb0-9784-3e3166504b81",
        "title": "EventEmitter tests",
        "fullFile": "/mnt/c/Users/borbalher/Documents/GitHub/handlebars-component-composer/src/event-emitter/event-emitter.test.js",
        "file": "/src/event-emitter/event-emitter.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should create an empty EventEmmiter",
            "fullTitle": "EventEmitter tests should create an empty EventEmmiter",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const eventEmitter = new EventEmitter()\nexpect(eventEmitter.events).to.deep.equal({})",
            "err": {},
            "isRoot": false,
            "uuid": "f242c27f-ef7a-4c77-a1f2-c03edfb3ba84",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should bind a listener to an event",
            "fullTitle": "EventEmitter tests should bind a listener to an event",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\neventEmitter = new EventEmitter(),\nlistener     = () => { console.log('LISTENER') }\neventEmitter.on('event', listener)\nexpect(eventEmitter.events['event']).to.deep.equal([listener])",
            "err": {},
            "isRoot": false,
            "uuid": "dba0ecb8-7599-4e1a-9aec-c888aaafe8ce",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should remove the listener of an event",
            "fullTitle": "EventEmitter tests should remove the listener of an event",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\neventEmitter = new EventEmitter(),\nlistener     = () => { console.log('LISTENER') }\neventEmitter.on('event', listener)\neventEmitter.removeListener('event', listener)\nexpect(eventEmitter.events['event']).to.deep.equal([])",
            "err": {},
            "isRoot": false,
            "uuid": "ee7f5cf9-0d8d-47ff-988e-3af238e2fe55",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not throw error when removing a listener of an empty event",
            "fullTitle": "EventEmitter tests should not throw error when removing a listener of an empty event",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\neventEmitter = new EventEmitter(),\nlistener     = () => { console.log('LISTENER') }\nexpect(() =>\n{\n  eventEmitter.removeListener('event', listener)\n}).to.not.throw()\nexpect(eventEmitter.events['event']).to.deep.equal(undefined)",
            "err": {},
            "isRoot": false,
            "uuid": "c9fa3f64-79f7-44f8-893d-c5d442b801c3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not throw error when removing a unregistered listener of an event",
            "fullTitle": "EventEmitter tests should not throw error when removing a unregistered listener of an event",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\neventEmitter = new EventEmitter(),\nlistenerA    = () => { console.log('LISTENER A') },\nlistenerB    = () => { console.log('LISTENER A') }\neventEmitter.on('event', listenerA)\nexpect(() =>\n{\n  eventEmitter.removeListener('event', listenerB)\n}).to.not.throw()",
            "err": {},
            "isRoot": false,
            "uuid": "14205463-be82-41b8-812f-9a8c391770b2",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should remove all the listeners of an event",
            "fullTitle": "EventEmitter tests should remove all the listeners of an event",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\neventEmitter = new EventEmitter(),\nlistenerA    = () => { console.log('LISTENER A') },\nlistenerB    = () => { console.log('LISTENER B') }\neventEmitter.on('event', listenerA)\neventEmitter.on('event', listenerB)\neventEmitter.removeAllListeners('event')\nexpect(eventEmitter.events['event']).to.deep.equal([])",
            "err": {},
            "isRoot": false,
            "uuid": "83db8352-57bf-4f5b-9fe4-f82c6fe4c19a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should reset the event emitter",
            "fullTitle": "EventEmitter tests should reset the event emitter",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\neventEmitter = new EventEmitter(),\nlistenerA    = () => { console.log('LISTENER A') },\nlistenerB    = () => { console.log('LISTENER B') }\neventEmitter.on('event', listenerA)\neventEmitter.on('event', listenerB)\neventEmitter.resetEventEmitter()\nexpect(eventEmitter.events).to.deep.equal({})",
            "err": {},
            "isRoot": false,
            "uuid": "413e1ebf-28f9-4e1e-bde3-1fc3ff887087",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should emit and capture an event",
            "fullTitle": "EventEmitter tests should emit and capture an event",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let value = null\nconst\neventEmitter = new EventEmitter(),\nlistener     = (arg) => { value = arg }\neventEmitter.on('event', listener)\neventEmitter.emit('event', 'changed')\nexpect(value).to.deep.equal('changed')",
            "err": {},
            "isRoot": false,
            "uuid": "247fca4b-12f7-4d77-b286-994209efcd95",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should not emit an event if there is no listener registered",
            "fullTitle": "EventEmitter tests should not emit an event if there is no listener registered",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let value = null\nconst\neventEmitter = new EventEmitter()\neventEmitter.emit('event', 'changed')\nexpect(value).to.deep.equal(null)",
            "err": {},
            "isRoot": false,
            "uuid": "39c93c57-b5e8-48fb-b822-c00b28db425d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should emit and capture an event once",
            "fullTitle": "EventEmitter tests should emit and capture an event once",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let value = null\nconst\neventEmitter = new EventEmitter(),\nlistener     = (arg) => { value = arg }\neventEmitter.once('event', listener)\neventEmitter.emit('event', 'changed')\neventEmitter.emit('event', 'changedAgain')\nexpect(value).to.deep.equal('changed')\nexpect(eventEmitter.events['event']).to.deep.equal([])",
            "err": {},
            "isRoot": false,
            "uuid": "c7f3dbf1-146c-4640-895e-453eecf47f7f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "f242c27f-ef7a-4c77-a1f2-c03edfb3ba84",
          "dba0ecb8-7599-4e1a-9aec-c888aaafe8ce",
          "ee7f5cf9-0d8d-47ff-988e-3af238e2fe55",
          "c9fa3f64-79f7-44f8-893d-c5d442b801c3",
          "14205463-be82-41b8-812f-9a8c391770b2",
          "83db8352-57bf-4f5b-9fe4-f82c6fe4c19a",
          "413e1ebf-28f9-4e1e-bde3-1fc3ff887087",
          "247fca4b-12f7-4d77-b286-994209efcd95",
          "39c93c57-b5e8-48fb-b822-c00b28db425d",
          "c7f3dbf1-146c-4640-895e-453eecf47f7f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "40dad2bd-d57f-4b27-9fef-7afb8b5e7d5d",
        "title": "UIController tests",
        "fullFile": "/mnt/c/Users/borbalher/Documents/GitHub/handlebars-component-composer/src/ui-controller/ui-controller.test.js",
        "file": "/src/ui-controller/ui-controller.test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "UIController tests \"before all\" hook",
            "timedOut": false,
            "duration": 1292,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// We activate DOM\nthis.jsdom = require('jsdom-global')()\n// Precompile unordered-list template\nconst\nHandlebars          = require('handlebars'),\njsonStringifyHelper = require('../handlebars/json-stringify')\nHandlebars.registerHelper('jsonStringify', jsonStringifyHelper)\nconst precompiledTemplate = Handlebars.compile('<ul data-model=\"{{jsonStringify this}}\">{{#each items}}<li>{{this}}</li>{{/each}}</ul>')\n\n// Add handlebars runtime and precompiled template to component-composer.views\nwindow.Handlebars = require('handlebars/runtime')\nwindow['component-composer'] =\n{\n  'views' :\n  {\n    'unordered-list' : precompiledTemplate\n  }\n}\n// Compile the template using the component helper\nconst\ncomponentHelper   = require('../handlebars/component'),\ncompiledComponent = componentHelper('unordered-list', { items: [1, 2, 3] }, 'myList')\n// Create a div with the compiled component view and append it to body\nconst div = document.createElement('div')\ndiv.innerHTML = compiledComponent\ndocument.body.appendChild(div)",
            "err": {},
            "isRoot": false,
            "uuid": "70056173-8fe6-4eed-8904-f425839dda61",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "UIController tests \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.jsdom()",
            "err": {},
            "isRoot": false,
            "uuid": "8dc94e6e-a9e6-411e-bb0e-238de5ac432f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "7238d842-061b-4613-bf4e-a587279ae66b",
            "title": "UIController class tests",
            "fullFile": "/mnt/c/Users/borbalher/Documents/GitHub/handlebars-component-composer/src/ui-controller/ui-controller.test.js",
            "file": "/src/ui-controller/ui-controller.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return UIController",
                "fullTitle": "UIController tests UIController class tests should return UIController",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller           = new UIController('#myList', 'unordered-list', unorderedListFactory)\nexpect(controller).to.be.instanceOf(UIController)\nexpect(document.getElementById('myList').innerHTML).equal('<ul data-model=\"{&quot;items&quot;:[1,2,3]}\"><li>1</li><li>2</li><li>3</li></ul>')",
                "err": {},
                "isRoot": false,
                "uuid": "8b79557c-e5c1-4d17-938b-9ab2845dd889",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change the vm",
                "fullTitle": "UIController tests UIController class tests should change the vm",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller = new UIController('#myList', 'unordered-list', unorderedListFactory)\ncontroller.setViewModel([3, 4, 5])\nexpect(controller.vm).to.deep.equal({ 'items': [3, 4, 5] })",
                "err": {},
                "isRoot": false,
                "uuid": "d9500053-2704-445c-acc6-3e0d0ec8bf25",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get a copy of the vm",
                "fullTitle": "UIController tests UIController class tests should get a copy of the vm",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller = new UIController('#myList', 'unordered-list', unorderedListFactory),\nvm = controller.getViewModel()\nexpect(controller.vm).to.deep.equal(vm)",
                "err": {},
                "isRoot": false,
                "uuid": "bcc1236a-0d86-43c8-9fd3-2433efb3ab52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should render the template",
                "fullTitle": "UIController tests UIController class tests should render the template",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller = new UIController('#myList', 'unordered-list', unorderedListFactory)\ncontroller.setViewModel([3, 4, 5])\ncontroller.render()\nconst view = document.getElementById('myList').innerHTML\nexpect(view).equal('<ul data-model=\"{&quot;items&quot;:[3,4,5]}\"><li>3</li><li>4</li><li>5</li></ul>')",
                "err": {},
                "isRoot": false,
                "uuid": "e687103f-8273-4dd7-bfa1-92559f626f72",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change, render the template and apply bindings",
                "fullTitle": "UIController tests UIController class tests should change, render the template and apply bindings",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller = new UIController('#myList', 'unordered-list', unorderedListFactory)\ncontroller.apply([3, 4, 5])\nconst view = document.getElementById('myList').innerHTML\nexpect(view).equal('<ul data-model=\"{&quot;items&quot;:[3,4,5]}\"><li>3</li><li>4</li><li>5</li></ul>')",
                "err": {},
                "isRoot": false,
                "uuid": "92ec2dd0-6fb0-486e-b6a8-ed7c8655a02c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get the ul node",
                "fullTitle": "UIController tests UIController class tests should get the ul node",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller = new UIController('#myList', 'unordered-list', unorderedListFactory),\nulNode     = controller.getComponentNode('ul')\nexpect(ulNode.nodeName).equal('UL')",
                "err": {},
                "isRoot": false,
                "uuid": "f0813045-fba8-4791-99fd-2390b1c07c10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should get the li nodes",
                "fullTitle": "UIController tests UIController class tests should get the li nodes",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\nunorderedListFactory = new UnorderedListFactory(),\ncontroller = new UIController('#myList', 'unordered-list', unorderedListFactory)\ncontroller.setViewModel([3, 4, 5])\ncontroller.render()\nconst liNodes = controller.getComponentNodes('li')\nexpect(liNodes.length).equal(3)",
                "err": {},
                "isRoot": false,
                "uuid": "fee14ac6-1a97-402d-8fe6-b53cea8c0453",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8b79557c-e5c1-4d17-938b-9ab2845dd889",
              "d9500053-2704-445c-acc6-3e0d0ec8bf25",
              "bcc1236a-0d86-43c8-9fd3-2433efb3ab52",
              "e687103f-8273-4dd7-bfa1-92559f626f72",
              "92ec2dd0-6fb0-486e-b6a8-ed7c8655a02c",
              "f0813045-fba8-4791-99fd-2390b1c07c10",
              "fee14ac6-1a97-402d-8fe6-b53cea8c0453"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6080b01e-c47e-4aeb-98f3-913f97bc39db",
            "title": "UIController injector tests",
            "fullFile": "/mnt/c/Users/borbalher/Documents/GitHub/handlebars-component-composer/src/ui-controller/ui-controller.test.js",
            "file": "/src/ui-controller/ui-controller.test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should return UIControllerInjector",
                "fullTitle": "UIController tests UIController injector tests should return UIControllerInjector",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\ncontrollersFactory   = new ControllersFactory(),\ninjector = new UIControllerInjector(controllersFactory)\nexpect(injector).to.be.instanceOf(UIControllerInjector)",
                "err": {},
                "isRoot": false,
                "uuid": "9277178b-fdd1-434f-8ae4-1c53b36a1a95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should inject UnorderedListController",
                "fullTitle": "UIController tests UIController injector tests should inject UnorderedListController",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\ncontrollersFactory  = new ControllersFactory(),\ninjector            = new UIControllerInjector(controllersFactory)\ninjector.inject()\nexpect(window.controllers['myList']).to.be.instanceOf(UIController)",
                "err": {},
                "isRoot": false,
                "uuid": "6e552358-3d5b-45d1-b369-6ce6c93a5cfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw CONTROLLER_FUNCTION_NOT_EXIST error ",
                "fullTitle": "UIController tests UIController injector tests should throw CONTROLLER_FUNCTION_NOT_EXIST error ",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const\ncontrollersFactory  = new ControllersFactory(),\ninjector            = new UIControllerInjector(controllersFactory),\ndiv                 = document.createElement('div')\n// We add a component div with id that has no controller function\ndiv.id = 'inject-error'\ndiv.classList.add('component-wrapper')\ndiv.setAttribute('data-component', 'component-inexistent')\ndocument.body.append(div)\nexpect(() =>\n{\n  injector.inject()\n}).to.throw(/this.controllersFactory\\[functionName\\] is not a function/)",
                "err": {},
                "isRoot": false,
                "uuid": "4ef4bad6-95dd-4bb7-a351-a82e00b0d46d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9277178b-fdd1-434f-8ae4-1c53b36a1a95",
              "6e552358-3d5b-45d1-b369-6ce6c93a5cfd",
              "4ef4bad6-95dd-4bb7-a351-a82e00b0d46d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e00275a2-b87c-4b31-824d-4cc59ecad11c",
        "title": "Handlebars Component client helper tests",
        "fullFile": "/mnt/c/Users/borbalher/Documents/GitHub/handlebars-component-composer/src/handlebars/component/component.test.js",
        "file": "/src/handlebars/component/component.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a safeString with an H1 title containing Hello world!",
            "fullTitle": "Handlebars Component client helper tests should return a safeString with an H1 title containing Hello world!",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nHandlebars          = require('handlebars'),\nprecompiledTemplate = Handlebars.compile('<h1>Hello {{name}}!</h1>')\nglobal.Handlebars = require('handlebars/runtime')\nglobal.window =\n{\n  'component-composer' :\n  {\n    'views' : {}\n  }\n}\nglobal.window['component-composer'].views['hello-name'] = precompiledTemplate\nconst\nhelper      = require('.'),\nsafeString  = helper('hello-name', { name: 'world' })\nassert(\n  safeString instanceof global.Handlebars.SafeString === true &&\n  safeString.string === '<div data-component=\"hello-name\" class=\"component-wrapper\"><h1>Hello world!</h1></div>'\n)",
            "err": {},
            "isRoot": false,
            "uuid": "655554c6-28d4-41ff-9325-0376f6a87a19",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should return a safeString with an H1 title containing Hello world! and the id \"helloNameComponent\"",
            "fullTitle": "Handlebars Component client helper tests should return a safeString with an H1 title containing Hello world! and the id \"helloNameComponent\"",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nHandlebars          = require('handlebars'),\nprecompiledTemplate = Handlebars.compile('<h1>Hello {{name}}!</h1>')\nglobal.Handlebars = require('handlebars/runtime')\nglobal.window =\n{\n  'component-composer' :\n  {\n    'views' : {}\n  }\n}\nglobal.window['component-composer'].views['hello-name'] = precompiledTemplate\nconst\nhelper      = require('.'),\nsafeString  = helper('hello-name', { name: 'world' }, 'helloNameComponent')\nassert(\n  safeString instanceof global.Handlebars.SafeString === true &&\n  safeString.string === '<div id=\"helloNameComponent\" data-component=\"hello-name\" class=\"component-wrapper\"><h1>Hello world!</h1></div>'\n)",
            "err": {},
            "isRoot": false,
            "uuid": "ed472c41-8a1c-4aeb-ae32-03407fc6228c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should throws NoPrecompiledViewError when component view file does not exists",
            "fullTitle": "Handlebars Component client helper tests should throws NoPrecompiledViewError when component view file does not exists",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "expect(() =>\n{\n  const helper = require('.')\n  helper('this-component-does-not-exists', {  })\n}).to.throw(/View 'this-component-does-not-exists' does not exists, it's not precompiled/)",
            "err": {},
            "isRoot": false,
            "uuid": "06d202fb-21a2-48de-b670-ee6b722bd9c4",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "655554c6-28d4-41ff-9325-0376f6a87a19",
          "ed472c41-8a1c-4aeb-ae32-03407fc6228c",
          "06d202fb-21a2-48de-b670-ee6b722bd9c4"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "aada066e-92a0-495b-aef1-9e7f770bd572",
        "title": "Handlebars JSON stringify helper tests",
        "fullFile": "/mnt/c/Users/borbalher/Documents/GitHub/handlebars-component-composer/src/handlebars/json-stringify/json-stringify.test.js",
        "file": "/src/handlebars/json-stringify/json-stringify.test.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should return a string with the given JSON object",
            "fullTitle": "Handlebars JSON stringify helper tests should return a string with the given JSON object",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const\nhandlebarsJSONhelper = require('.'),\nstr                  = handlebarsJSONhelper({ hello: 'world' })\nassert(\n  typeof str === 'string' &&\n  str === '{\"hello\":\"world\"}'\n)",
            "err": {},
            "isRoot": false,
            "uuid": "478d09cc-018d-4739-a026-108453dd0874",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "478d09cc-018d-4739-a026-108453dd0874"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}